{"ast":null,"code":"var _jsxFileName = \"/home/matb/UISOLAR/solar-ui/src/components/LoadTable.jsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport AddIcon from '@mui/icons-material/Add';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\nimport SaveIcon from '@mui/icons-material/Save';\nimport CancelIcon from '@mui/icons-material/Close';\nimport { useGridApiRef, DataGridPro, GridToolbarContainer, GridActionsCellItem } from '@mui/x-data-grid-pro';\nimport { randomCreatedDate, randomTraderName, randomUpdatedDate, randomId } from '@mui/x-data-grid-generator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rows = [{\n  id: randomId(),\n  name: randomTraderName(),\n  age: 25,\n  dateCreated: randomCreatedDate(),\n  lastLogin: randomUpdatedDate()\n}, {\n  id: randomId(),\n  name: randomTraderName(),\n  age: 36,\n  dateCreated: randomCreatedDate(),\n  lastLogin: randomUpdatedDate()\n}, {\n  id: randomId(),\n  name: randomTraderName(),\n  age: 19,\n  dateCreated: randomCreatedDate(),\n  lastLogin: randomUpdatedDate()\n}, {\n  id: randomId(),\n  name: randomTraderName(),\n  age: 28,\n  dateCreated: randomCreatedDate(),\n  lastLogin: randomUpdatedDate()\n}, {\n  id: randomId(),\n  name: randomTraderName(),\n  age: 23,\n  dateCreated: randomCreatedDate(),\n  lastLogin: randomUpdatedDate()\n}];\n\nfunction EditToolbar(props) {\n  const {\n    apiRef\n  } = props;\n\n  const handleClick = () => {\n    const id = randomId();\n    apiRef.current.updateRows([{\n      id,\n      isNew: true\n    }]);\n    apiRef.current.setRowMode(id, 'edit'); // Wait for the grid to render with the new row\n\n    setTimeout(() => {\n      apiRef.current.scrollToIndexes({\n        rowIndex: apiRef.current.getRowsCount() - 1\n      });\n      apiRef.current.setCellFocus(id, 'name');\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GridToolbarContainer, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 42\n      }, this),\n      onClick: handleClick,\n      children: \"Add record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_c = EditToolbar;\nEditToolbar.propTypes = {\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }).isRequired\n};\nexport default function FullFeaturedCrudGrid() {\n  _s();\n\n  const apiRef = useGridApiRef();\n\n  const handleRowEditStart = (params, event) => {\n    event.defaultMuiPrevented = true;\n  };\n\n  const handleRowEditStop = (params, event) => {\n    event.defaultMuiPrevented = true;\n  };\n\n  const handleCellFocusOut = (params, event) => {\n    event.defaultMuiPrevented = true;\n  };\n\n  const handleEditClick = id => event => {\n    event.stopPropagation();\n    apiRef.current.setRowMode(id, 'edit');\n  };\n\n  const handleSaveClick = id => event => {\n    event.stopPropagation();\n    apiRef.current.commitRowChange(id);\n    apiRef.current.setRowMode(id, 'view');\n    const row = apiRef.current.getRow(id);\n    apiRef.current.updateRows([{ ...row,\n      isNew: false\n    }]);\n  };\n\n  const handleDeleteClick = id => event => {\n    event.stopPropagation();\n    apiRef.current.updateRows([{\n      id,\n      _action: 'delete'\n    }]);\n  };\n\n  const handleCancelClick = id => event => {\n    event.stopPropagation();\n    apiRef.current.setRowMode(id, 'view');\n    const row = apiRef.current.getRow(id);\n\n    if (row.isNew) {\n      apiRef.current.updateRows([{\n        id,\n        _action: 'delete'\n      }]);\n    }\n  };\n\n  const columns = [{\n    field: 'name',\n    headerName: 'Name',\n    width: 180,\n    editable: true\n  }, {\n    field: 'age',\n    headerName: 'Age',\n    type: 'number',\n    editable: true\n  }, {\n    field: 'dateCreated',\n    headerName: 'Date Created',\n    type: 'date',\n    width: 180,\n    editable: true\n  }, {\n    field: 'lastLogin',\n    headerName: 'Last Login',\n    type: 'dateTime',\n    width: 220,\n    editable: true\n  }, {\n    field: 'actions',\n    type: 'actions',\n    headerName: 'Actions',\n    width: 100,\n    cellClassName: 'actions',\n    getActions: _ref => {\n      let {\n        id\n      } = _ref;\n      const isInEditMode = apiRef.current.getRowMode(id) === 'edit';\n\n      if (isInEditMode) {\n        return [/*#__PURE__*/_jsxDEV(GridActionsCellItem, {\n          icon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 21\n          }, this),\n          label: \"Save\",\n          onClick: handleSaveClick(id),\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GridActionsCellItem, {\n          icon: /*#__PURE__*/_jsxDEV(CancelIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 21\n          }, this),\n          label: \"Cancel\",\n          className: \"textPrimary\",\n          onClick: handleCancelClick(id),\n          color: \"inherit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this)];\n      }\n\n      return [/*#__PURE__*/_jsxDEV(GridActionsCellItem, {\n        icon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 19\n        }, this),\n        label: \"Edit\",\n        className: \"textPrimary\",\n        onClick: handleEditClick(id),\n        color: \"inherit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GridActionsCellItem, {\n        icon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 19\n        }, this),\n        label: \"Delete\",\n        onClick: handleDeleteClick(id),\n        color: \"inherit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this)];\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: 500,\n      width: '100%',\n      '& .actions': {\n        color: 'text.secondary'\n      },\n      '& .textPrimary': {\n        color: 'text.primary'\n      }\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGridPro, {\n      rows: rows,\n      columns: columns,\n      apiRef: apiRef,\n      editMode: \"row\",\n      onRowEditStart: handleRowEditStart,\n      onRowEditStop: handleRowEditStop,\n      onCellFocusOut: handleCellFocusOut,\n      components: {\n        Toolbar: EditToolbar\n      },\n      componentsProps: {\n        toolbar: {\n          apiRef\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FullFeaturedCrudGrid, \"o091W/uxhadiy5Sy/wo3F3JLylc=\", false, function () {\n  return [useGridApiRef];\n});\n\n_c2 = FullFeaturedCrudGrid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditToolbar\");\n$RefreshReg$(_c2, \"FullFeaturedCrudGrid\");","map":{"version":3,"sources":["/home/matb/UISOLAR/solar-ui/src/components/LoadTable.jsx"],"names":["React","PropTypes","Box","Button","AddIcon","EditIcon","DeleteIcon","SaveIcon","CancelIcon","useGridApiRef","DataGridPro","GridToolbarContainer","GridActionsCellItem","randomCreatedDate","randomTraderName","randomUpdatedDate","randomId","rows","id","name","age","dateCreated","lastLogin","EditToolbar","props","apiRef","handleClick","current","updateRows","isNew","setRowMode","setTimeout","scrollToIndexes","rowIndex","getRowsCount","setCellFocus","propTypes","shape","object","isRequired","FullFeaturedCrudGrid","handleRowEditStart","params","event","defaultMuiPrevented","handleRowEditStop","handleCellFocusOut","handleEditClick","stopPropagation","handleSaveClick","commitRowChange","row","getRow","handleDeleteClick","_action","handleCancelClick","columns","field","headerName","width","editable","type","cellClassName","getActions","isInEditMode","getRowMode","height","color","Toolbar","toolbar"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport AddIcon from '@mui/icons-material/Add';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\nimport SaveIcon from '@mui/icons-material/Save';\nimport CancelIcon from '@mui/icons-material/Close';\nimport {\n  useGridApiRef,\n  DataGridPro,\n  GridToolbarContainer,\n  GridActionsCellItem,\n} from '@mui/x-data-grid-pro';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n  randomId,\n} from '@mui/x-data-grid-generator';\n\nconst rows = [\n  {\n    id: randomId(),\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: randomId(),\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: randomId(),\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: randomId(),\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: randomId(),\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n\nfunction EditToolbar(props) {\n  const { apiRef } = props;\n\n  const handleClick = () => {\n    const id = randomId();\n    apiRef.current.updateRows([{ id, isNew: true }]);\n    apiRef.current.setRowMode(id, 'edit');\n    // Wait for the grid to render with the new row\n    setTimeout(() => {\n      apiRef.current.scrollToIndexes({\n        rowIndex: apiRef.current.getRowsCount() - 1,\n      });\n\n      apiRef.current.setCellFocus(id, 'name');\n    });\n  };\n\n  return (\n    <GridToolbarContainer>\n      <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleClick}>\n        Add record\n      </Button>\n    </GridToolbarContainer>\n  );\n}\n\nEditToolbar.propTypes = {\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired,\n  }).isRequired,\n};\n\nexport default function FullFeaturedCrudGrid() {\n  const apiRef = useGridApiRef();\n\n  const handleRowEditStart = (params, event) => {\n    event.defaultMuiPrevented = true;\n  };\n\n  const handleRowEditStop = (params, event) => {\n    event.defaultMuiPrevented = true;\n  };\n\n  const handleCellFocusOut = (params, event) => {\n    event.defaultMuiPrevented = true;\n  };\n\n  const handleEditClick = (id) => (event) => {\n    event.stopPropagation();\n    apiRef.current.setRowMode(id, 'edit');\n  };\n\n  const handleSaveClick = (id) => (event) => {\n    event.stopPropagation();\n    apiRef.current.commitRowChange(id);\n    apiRef.current.setRowMode(id, 'view');\n\n    const row = apiRef.current.getRow(id);\n    apiRef.current.updateRows([{ ...row, isNew: false }]);\n  };\n\n  const handleDeleteClick = (id) => (event) => {\n    event.stopPropagation();\n    apiRef.current.updateRows([{ id, _action: 'delete' }]);\n  };\n\n  const handleCancelClick = (id) => (event) => {\n    event.stopPropagation();\n    apiRef.current.setRowMode(id, 'view');\n\n    const row = apiRef.current.getRow(id);\n    if (row.isNew) {\n      apiRef.current.updateRows([{ id, _action: 'delete' }]);\n    }\n  };\n\n  const columns = [\n    { field: 'name', headerName: 'Name', width: 180, editable: true },\n    { field: 'age', headerName: 'Age', type: 'number', editable: true },\n    {\n      field: 'dateCreated',\n      headerName: 'Date Created',\n      type: 'date',\n      width: 180,\n      editable: true,\n    },\n    {\n      field: 'lastLogin',\n      headerName: 'Last Login',\n      type: 'dateTime',\n      width: 220,\n      editable: true,\n    },\n    {\n      field: 'actions',\n      type: 'actions',\n      headerName: 'Actions',\n      width: 100,\n      cellClassName: 'actions',\n      getActions: ({ id }) => {\n        const isInEditMode = apiRef.current.getRowMode(id) === 'edit';\n\n        if (isInEditMode) {\n          return [\n            <GridActionsCellItem\n              icon={<SaveIcon />}\n              label=\"Save\"\n              onClick={handleSaveClick(id)}\n              color=\"primary\"\n            />,\n            <GridActionsCellItem\n              icon={<CancelIcon />}\n              label=\"Cancel\"\n              className=\"textPrimary\"\n              onClick={handleCancelClick(id)}\n              color=\"inherit\"\n            />,\n          ];\n        }\n\n        return [\n          <GridActionsCellItem\n            icon={<EditIcon />}\n            label=\"Edit\"\n            className=\"textPrimary\"\n            onClick={handleEditClick(id)}\n            color=\"inherit\"\n          />,\n          <GridActionsCellItem\n            icon={<DeleteIcon />}\n            label=\"Delete\"\n            onClick={handleDeleteClick(id)}\n            color=\"inherit\"\n          />,\n        ];\n      },\n    },\n  ];\n\n  return (\n    <Box\n      sx={{\n        height: 500,\n        width: '100%',\n        '& .actions': {\n          color: 'text.secondary',\n        },\n        '& .textPrimary': {\n          color: 'text.primary',\n        },\n      }}\n    >\n      <DataGridPro\n        rows={rows}\n        columns={columns}\n        apiRef={apiRef}\n        editMode=\"row\"\n        onRowEditStart={handleRowEditStart}\n        onRowEditStop={handleRowEditStop}\n        onCellFocusOut={handleCellFocusOut}\n        components={{\n          Toolbar: EditToolbar,\n        }}\n        componentsProps={{\n          toolbar: { apiRef },\n        }}\n      />\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}